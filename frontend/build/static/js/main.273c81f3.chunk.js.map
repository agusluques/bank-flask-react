{"version":3,"sources":["components/HomeContainer/homeCointainer.js","components/Common/Row/row.js","components/Common/Table/table.js","components/Transaction/transaction.js","redux/actions/transactionActions.js","redux/actions/actionTypes.js","components/About/about.js","redux/actions/accountActions.js","components/Home/home.js","App.js","constants/routes.js","redux/reducers/transactionsReducer.js","redux/reducers/accountReducer.js","redux/root-reducer.js","axios/axios.js","middlewares/api-middleware.js","redux/store.js","serviceWorker.js","index.js"],"names":["HomeContainer","props","className","children","Row","transaction","useState","isExpanded","setIsExpanded","card_type","onClick","id","value","colSpan","date_created","Table","transactions","hasFetched","setHasFetched","useEffect","placeholder","map","tr","length","connect","state","transactionStore","dispatch","getTransactions","account_id","type","meta","api","method","url","actionCreators","account","accountStore","getAccount","user_id","balance","Home","App","path","component","HomePage","initialState","transactionsReducer","action","response","data","accountReducer","RootReducer","combineReducers","instance","axios","create","baseURL","apiMiddleware","store","next","Promise","resolve","reject","then","catch","error","createStore","composeWithDevTools","applyMiddleware","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.273c81f3.chunk.js","sourcesContent":["import React from 'react';\n\nconst HomeContainer = (props) => {\n    return (\n        <div className=\"container\">\n            <div>{props.children}</div>\n        </div>\n    )\n}\n\nexport default HomeContainer;","import React, { useState } from 'react';\nimport './row.scss';\n\nconst Row = (props) => {\n    const { transaction } = props;\n    const [isExpanded, setIsExpanded] = useState(false);\n\n    return (\n        <>\n            <tr className={`row-${transaction.card_type}`}>\n                <button onClick={() => setIsExpanded(!isExpanded)} className='btn btn-outline-primary expanded'>\n                    {isExpanded ? \n                        '-' :\n                        '+'\n                        }\n                </button>\n                <td>{transaction.id}</td>\n                <td>{transaction.value}</td>\n            </tr>\n            {isExpanded &&\n                <tr>\n                    <td colSpan=\"3\">\n                        <div>\n                            Date: {transaction.date_created} <br/>\n                            Type: {transaction.card_type}\n                        </div>\n                    </td>\n                </tr>\n            }\n        </>\n    )\n}\n\nexport default Row;","import React, { useEffect, useState } from 'react';\nimport './table.scss';\nimport Row from '../Row/row';\n\nconst Table = (props) => {\n    const { transactions } = props;\n\n    const [hasFetched, setHasFetched] = useState(props.hasFetched);\n\n    useEffect(()=> {\n        setHasFetched(props.hasFetched);\n    }, [props.hasFetched])\n\n    const placeholder = transactions.map((tr) => {\n        return (\n            <Row transaction={tr}></Row>\n        )\n    })\n\n    return transactions.length > 0 ?\n        <table className='table'>\n            <thead>\n                <th></th>\n                <th>Id</th>\n                <th>$</th>\n            </thead>\n            {placeholder}\n        </table> : (hasFetched && <section className='noData'>No data</section>);\n};\n\nexport default Table;","import React, {useState} from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreators from '../../redux/actions/index';\nimport './transaction.scss';\n\nimport Table from '../Common/Table/table';\n\nconst Transaction = (props) => {\n    const [hasFetched, setHasFetched] = useState(false);\n\n    return (\n        <section className='transaction'>\n            <section className='header'>\n                <button className=\"btn btn-primary\" onClick={() => {\n                        setHasFetched(true);\n                        props.getTransactions(1)\n                    }}>My Transactions</button>\n                <section>\n                    <section><span className='credit-dot' /> Credit</section>\n                    <section><span className='debit-dot' /> Debit</section>\n                </section>\n            </section>\n            <Table transactions={props.transactions} hasFetched={hasFetched}></Table>\n        </section>\n    )\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        transactions: state.transactionStore.transactions\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getTransactions: (account_id) => dispatch(actionCreators.getAllTransactions(account_id))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Transaction);","import * as actionsTypes from './actionTypes';\n\nexport const getAllTransactions = (account_id) => {\n    return {\n        type: actionsTypes.GET_ALL_TRANSACTIONS,\n        meta: {\n            api: {\n                method: 'GET',\n                url: `/accounts/${account_id}/transactions/`\n            }\n        }\n    }\n}","export const GET_ALL_TRANSACTIONS = 'GET_ALL_TRANSACTIONS'\n\nexport const GET_MY_ACCOUNT = 'GET_MY_ACCOUNT'","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreators from '../../redux/actions/index';\nimport './about.scss';\n\nconst About = (props) => {\n    useEffect(() => {\n        props.getAccount(1);\n    }, [])\n\n    return (\n        <section className='about'>\n            <button className='btn-secondary' onClick={() => props.getAccount(1)}>Refresh Account Details</button>\n            <div><b>Account Id:</b> {props.account.id}</div>\n            <div><b>User Id:</b> {props.account.user_id}</div>\n            <div><b>Balance:</b> {props.account.balance}</div>\n        </section>\n    )\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        account: state.accountStore\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getAccount: (account_id) => dispatch(actionCreators.getMyAccount(account_id))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(About);","import * as actionsTypes from './actionTypes';\n\nexport const getMyAccount = (account_id) => {\n    return {\n        type: actionsTypes.GET_MY_ACCOUNT,\n        meta: {\n            api: {\n                method: 'GET',\n                url: `/accounts/${account_id}/`\n            }\n        }\n    }\n}","import React from 'react'\r\nimport './home.scss'\r\n\r\nimport Transaction from '../Transaction/transaction';\r\nimport About from '../About/about';\r\n\r\nconst Home = (props) => {\r\n   return (\r\n      <div className=\"home\">\r\n         <Transaction></Transaction>\r\n         <About></About>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { ROUTE_HOME } from './constants/routes';\nimport Container from './components/HomeContainer/homeCointainer';\nimport HomePage from './components/Home/home';\n\nconst App = () => {\n   return (\n      <Container>\n         <Switch>\n            <Route path={ROUTE_HOME} component={HomePage} />\n         </Switch>\n      </Container>\n   )\n}\n\nexport default App\n","export const ROUTE_HOME = \"/\"\r\n","import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    transactions: []\n};\n\nconst transactionsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.GET_ALL_TRANSACTIONS:\n            return {\n                ...state,\n                transactions: action.response.data\n            }\n        default:\n            return state;\n    }\n}\n\nexport default transactionsReducer;","import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {};\n\nconst accountReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.GET_MY_ACCOUNT:\n            return {\n                ...state,\n                ...action.response.data\n            }\n        default:\n            return state;\n    }\n}\n\nexport default accountReducer;","import { combineReducers } from 'redux'\r\nimport transactionsReducer from './reducers/transactionsReducer';\r\nimport accountReducer from './reducers/accountReducer';\r\n\r\nconst RootReducer = combineReducers({\r\n   transactionStore: transactionsReducer,\r\n   accountStore: accountReducer\r\n})\r\n\r\nexport default RootReducer\r\n","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'http://localhost:5000/api'\n});\n\nexport default instance;","import instance from '../axios/axios';\n\nconst apiMiddleware = (store) => (next) => (action) => {\n    if (!(action.meta && action.meta.api)) {\n        return next(action);\n    }\n\n    let { method, url, data } = action.meta.api;\n\n    const promise = new Promise((resolve, reject) => {\n        instance({\n            method: method,\n            url: url,\n            data: data\n        }).then((response) => {\n            action.response = response;\n            next(action);\n            return resolve();\n        }).catch((error) => {\n           action.error = error;\n           next(action);\n           return reject(); \n        })\n\n    })\n\n    return promise;\n};\n\nexport default apiMiddleware;","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport RootReducer from './root-reducer';\r\nimport apiMiddleware from '../middlewares/api-middleware';\r\n\r\nconst store = createStore(\r\n    RootReducer,\r\n    composeWithDevTools(\r\n        applyMiddleware(\r\n            apiMiddleware\r\n        )\r\n    )\r\n)\r\n\r\nexport default store\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport './index.scss';\nimport store from './redux/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n   <Provider store={store}>\n      <BrowserRouter>\n         <App />\n      </BrowserRouter>\n   </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}